// <auto-generated />
using System;
using FINAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FINAL.Migrations
{
    [DbContext(typeof(PropDbContext))]
    [Migration("20200324074934_DeletedSomePropsAndAddedAddStatusPropINTOPropAddTable")]
    partial class DeletedSomePropsAndAddedAddStatusPropINTOPropAddTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FINAL.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FINAL.Models.ContactNumber", b =>
                {
                    b.Property<int>("ContactNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContactNumberId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactNumbers");
                });

            modelBuilder.Entity("FINAL.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("FINAL.Models.PropAdd", b =>
                {
                    b.Property<int>("PropAddId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddStatus")
                        .HasColumnType("int");

                    b.Property<int>("AddType")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FullAbout")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("MainPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PropDoc")
                        .HasColumnType("int");

                    b.Property<int>("PropFlatSum")
                        .HasColumnType("int");

                    b.Property<int>("PropFloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("PropFloorSum")
                        .HasColumnType("int");

                    b.Property<decimal>("PropPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("PropVolume")
                        .HasColumnType("money");

                    b.Property<int>("PropertySortId")
                        .HasColumnType("int");

                    b.Property<int>("SaleType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PropAddId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PropertySortId");

                    b.HasIndex("UserId");

                    b.ToTable("PropAdds");
                });

            modelBuilder.Entity("FINAL.Models.PropPhoto", b =>
                {
                    b.Property<int>("PropPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropAddId")
                        .HasColumnType("int");

                    b.Property<string>("PropPhotoName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropPhotoId");

                    b.HasIndex("PropAddId");

                    b.ToTable("PropPhotos");
                });

            modelBuilder.Entity("FINAL.Models.PropertyCharacter", b =>
                {
                    b.Property<int>("PCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PCName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("PropAddId")
                        .HasColumnType("int");

                    b.HasKey("PCId");

                    b.HasIndex("PropAddId");

                    b.ToTable("PropertyCharacters");
                });

            modelBuilder.Entity("FINAL.Models.PropertySort", b =>
                {
                    b.Property<int>("PropertySortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PropertySortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("PropertySortId");

                    b.ToTable("PropertySorts");
                });

            modelBuilder.Entity("FINAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FINAL.Models.WebsiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FacebookAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FooterLogo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LinkedinAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LocalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MainLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("TwitterAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("WebsiteSettings");
                });

            modelBuilder.Entity("FINAL.Models.ContactNumber", b =>
                {
                    b.HasOne("FINAL.Models.User", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FINAL.Models.District", b =>
                {
                    b.HasOne("FINAL.Models.City", null)
                        .WithMany("Districts")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("FINAL.Models.PropAdd", b =>
                {
                    b.HasOne("FINAL.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FINAL.Models.District", "District")
                        .WithMany("PropAdds")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FINAL.Models.PropertySort", "PropertySort")
                        .WithMany("PropAdds")
                        .HasForeignKey("PropertySortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FINAL.Models.User", "User")
                        .WithMany("PropAdds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FINAL.Models.PropPhoto", b =>
                {
                    b.HasOne("FINAL.Models.PropAdd", "PropAdd")
                        .WithMany("PropPhotos")
                        .HasForeignKey("PropAddId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FINAL.Models.PropertyCharacter", b =>
                {
                    b.HasOne("FINAL.Models.PropAdd", null)
                        .WithMany("PropertyCharacters")
                        .HasForeignKey("PropAddId");
                });
#pragma warning restore 612, 618
        }
    }
}
